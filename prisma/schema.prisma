datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
  CLIENT
}

enum PostType {
  ARTICLE
  TOUR
  EXCURSION
  EVENT
  PLACE
  HOTEL
}

enum EntityType {
  POST
  CATEGORY
  REGION
}

enum RelationType {
  CATEGORY
  REGION
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          UserRole        @default(USER)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Post {
  id          String          @id @default(cuid())
  slug        String          @unique
  postType    PostType        @default(ARTICLE)
  title       String
  description String
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts    Contacts[]
  location    Location?       // Связь указана только с одной стороны
  images      ImageRelation[] @relation("PostImages")
  relations   PostRelation[]  // Универсальные связи вместо PostRegion и PostCategories

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("posts")
}

model Location {
  id        String   @id @default(cuid())
  postId    String   @unique
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  address   String
  latitude  Float
  longitude Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("location")
}

model Categories {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  description String?
  postType    PostType?
  images      ImageRelation[] @relation("CategoryImages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Region {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  description String?
  images      ImageRelation[] @relation("RegionImages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("region")
}

model PostRelation {
  id          String       @id @default(cuid())
  postId      String
  entityId    String
  relationType RelationType
  post        Post         @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([postId, entityId, relationType], map: "post_entity_relation_idx")
  @@map("post_relations")
}

model Image {
  id          String   @id @default(cuid())
  url         String
  s3Key       String   @unique
  title       String?
  description String?
  alt         String?
  relations   ImageRelation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("images")
}

model ImageRelation {
  id        String    @id @default(cuid())
  imageId   String
  entityId  String
  entityType EntityType
  image     Image     @relation(fields: [imageId], references: [id], onDelete: Cascade, map: "fk_image_relation_image")
  post      Post?     @relation("PostImages", fields: [entityId], references: [id], map: "fk_image_relation_post")
  category  Categories? @relation("CategoryImages", fields: [entityId], references: [id], map: "fk_image_relation_category")
  region    Region?   @relation("RegionImages", fields: [entityId], references: [id], map: "fk_image_relation_region")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([entityId, entityType], map: "entity_entityType_idx")
  @@map("image_relations")
}

model Contacts {
  id      String   @id @default(cuid())
  postId  String
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  phone   String
  email   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("contacts")
}
