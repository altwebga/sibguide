datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
ADMIN
USER
CLIENT
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          UserRole @default(USER)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum PostType {
  ARTICLE
  TOUR
  EXCURSION
  HOTEL
  EVENT
  PLACE
}

model Post {
  id          String   @id @default(cuid())
  slug        String   @unique
  postType    PostType @default(ARTICLE)
  title       String
  description String
  images      PostImage[]
  userEmail   String
  user        User       @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("posts")
}

model Image {
  id          String   @id @default(cuid())
  url         String
  title       String?
  description String?
  alt         String?
  s3Key       String
  posts       PostImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("images")
}

model PostImage {
  postId  String
  imageId String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, imageId])
  @@map("post_images")
}
